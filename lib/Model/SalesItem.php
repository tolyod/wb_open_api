<?php
/**
 * SalesItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API продавца
 *
 * # Общее описание <style> .version {   border: 0.1rem #b3b3b3 solid ;   background-color: #F9F9F9;   color: #32329FE6;   height: 25px;   width: 150px;   text-align: center } </style> Wildberries API предоставляет продавцам возможность управления магазином и получения оперативной и статистической информации по протоколу HTTP RestAPI. <br> Описание API предоставляется в формате [Swagger](https://swagger.io/) (Open API) и может быть использовано для импорта в другие инструменты (такие как PostMan) или генерации клиентского кода на различных языках программирования с помощью [Swagger CodeGen](https://swagger.io/tools/swagger-codegen/)  <ul> <li> Описание в оригинальном swagger-формате <a href=\"/swagger\">swagger</a> <li> OpenAPI-файл <a href=\"/swagger.yaml\">swagger.yaml</a> </ul>  <br> Для ручной проверки API вы можете использовать: <ul> <li> Под ОС Windows - [PostMan](https://www.postman.com/) <li> Под ОС Linux - [curl](https://curl.se/)  </ul>  ## Поддержка <br> Техническая поддержка осуществляется через обращения в личном кабинете продавца. При создании нового обращения в техподдержку используйте категорию API. <br> Новости и изменения, касающиеся API, публикуются в [новостной ленте Wildberries](https://seller.wildberries.ru/news). <br> Также готовятся к публикации Release Notes по API на сайте.  После их выхода будет сделан соответствующий анонс.   ## Авторизация Вызов любого метода API должен быть авторизован.  Авторизация осуществляется по ключам API, которые  владелец личного кабинета (главный пользователь) самостоятельно  генерирует в разделе   [Профиль --> Настройки --> Доступ к API](https://seller.wildberries.ru/supplier-settings/access-to-api) для статистики   и [Профиль --> Настройки --> Доступ к новому API](https://seller.wildberries.ru/supplier-settings/access-to-new-api) для остальных методов.   Ключ должен передаваться в каждом HTTP-запросе.   ### Авторизация для методов Статистики При работе с методами Статистики ключ авторизации генерируется в разделе \"Профиль --> Настройки --> Доступ к API\". <br>Созданный ключ отображается в личном кабинете как \"Ключ для работы с API статистики x64\". <br>Его следует скопировать и добавлять в каждый запрос, прибавляя к запросу параметр `key`. <br>Выглядеть запрос будет примерно так: `https://suppliers-stats.wildberries.ru/api/v1/supplier/stocks?dateFrom=2022-03-25&key=xxxxxxxxxx`    ### Авторизация для нестатистических методов При работе со всеми методами кроме статистики ключ авторизации генерируется в разделе \"Профиль --> Настройки --> Доступ к новому API\". <br>Обратите внимание, что ключ отображается ТОЛЬКО в момент создания. Его надо сохранить, потому что больше его отобразить будет нельзя. <br>Созданный ключ следует добавлять в каждый запрос, прибавляя к запросу заголовок (http-header) формата `Authorization: xxxxxxxxxx`.  ## Форматы ### Дата и время Во всех методах API статистики дата и время передаются в формате [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).  <br> В большинстве случаев вы можете передать дату или дату со временем. Если время не указано, оно принимается равным 00:00:00. Время можно указывать с точностью до секунд или миллисекунд.  Литера `Z` в конце строки означает часовой пояс UTC. При ее отсутствии время считается в часовом поясе МСК (UTC+3). <br> Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T00:00:00Z` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345Z` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>   ## Release Notes  #### 2022.10.31 v1.4  Метод будет отключен 2022.10.31 в v1.4: <ul> <li> `/content/v1/cards/list` </ul>  #### 2022.09.20 v1.2  В связи с переходом на новое API Контента старые методы будут отключены. К их числу относятся: <ul> <li> `/card/_*` <li> `/api/v1/config/_*` <li> `/api/v1/directory/_*` </ul> Данные методы теперь возвращают код 404.  Новое API Контента описано в данном документе в разделах Контент / *
 *
 * The version of the OpenAPI document: 1.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SalesItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SalesItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SalesItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'g_number' => 'string',
        'date' => '\DateTime',
        'last_change_date' => '\DateTime',
        'supplier_article' => 'string',
        'tech_size' => 'string',
        'barcode' => 'string',
        'total_price' => 'float',
        'discount_percent' => 'int',
        'is_supply' => 'bool',
        'is_realization' => 'bool',
        'promo_code_discount' => 'float',
        'warehouse_name' => 'string',
        'country_name' => 'string',
        'oblast_okrug_name' => 'string',
        'region_name' => 'string',
        'income_id' => 'int',
        'sale_id' => 'string',
        'odid' => 'int',
        'spp' => 'float',
        'for_pay' => 'float',
        'finished_price' => 'float',
        'price_with_disc' => 'float',
        'nm_id' => 'int',
        'subject' => 'string',
        'category' => 'string',
        'brand' => 'string',
        'is_storno' => 'int',
        'sticker' => 'string',
        'srid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'g_number' => null,
        'date' => 'date-time',
        'last_change_date' => 'date-time',
        'supplier_article' => null,
        'tech_size' => null,
        'barcode' => null,
        'total_price' => null,
        'discount_percent' => null,
        'is_supply' => null,
        'is_realization' => null,
        'promo_code_discount' => null,
        'warehouse_name' => null,
        'country_name' => null,
        'oblast_okrug_name' => null,
        'region_name' => null,
        'income_id' => null,
        'sale_id' => null,
        'odid' => null,
        'spp' => null,
        'for_pay' => null,
        'finished_price' => null,
        'price_with_disc' => null,
        'nm_id' => null,
        'subject' => null,
        'category' => null,
        'brand' => null,
        'is_storno' => null,
        'sticker' => null,
        'srid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'g_number' => false,
		'date' => false,
		'last_change_date' => false,
		'supplier_article' => false,
		'tech_size' => false,
		'barcode' => false,
		'total_price' => false,
		'discount_percent' => false,
		'is_supply' => false,
		'is_realization' => false,
		'promo_code_discount' => false,
		'warehouse_name' => false,
		'country_name' => false,
		'oblast_okrug_name' => false,
		'region_name' => false,
		'income_id' => false,
		'sale_id' => false,
		'odid' => false,
		'spp' => false,
		'for_pay' => false,
		'finished_price' => false,
		'price_with_disc' => false,
		'nm_id' => false,
		'subject' => false,
		'category' => false,
		'brand' => false,
		'is_storno' => false,
		'sticker' => false,
		'srid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'g_number' => 'gNumber',
        'date' => 'date',
        'last_change_date' => 'lastChangeDate',
        'supplier_article' => 'supplierArticle',
        'tech_size' => 'techSize',
        'barcode' => 'barcode',
        'total_price' => 'totalPrice',
        'discount_percent' => 'discountPercent',
        'is_supply' => 'isSupply',
        'is_realization' => 'isRealization',
        'promo_code_discount' => 'promoCodeDiscount',
        'warehouse_name' => 'warehouseName',
        'country_name' => 'countryName',
        'oblast_okrug_name' => 'oblastOkrugName',
        'region_name' => 'regionName',
        'income_id' => 'incomeID',
        'sale_id' => 'saleID',
        'odid' => 'odid',
        'spp' => 'spp',
        'for_pay' => 'forPay',
        'finished_price' => 'finishedPrice',
        'price_with_disc' => 'priceWithDisc',
        'nm_id' => 'nmId',
        'subject' => 'subject',
        'category' => 'category',
        'brand' => 'brand',
        'is_storno' => 'isStorno',
        'sticker' => 'sticker',
        'srid' => 'srid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'g_number' => 'setGNumber',
        'date' => 'setDate',
        'last_change_date' => 'setLastChangeDate',
        'supplier_article' => 'setSupplierArticle',
        'tech_size' => 'setTechSize',
        'barcode' => 'setBarcode',
        'total_price' => 'setTotalPrice',
        'discount_percent' => 'setDiscountPercent',
        'is_supply' => 'setIsSupply',
        'is_realization' => 'setIsRealization',
        'promo_code_discount' => 'setPromoCodeDiscount',
        'warehouse_name' => 'setWarehouseName',
        'country_name' => 'setCountryName',
        'oblast_okrug_name' => 'setOblastOkrugName',
        'region_name' => 'setRegionName',
        'income_id' => 'setIncomeId',
        'sale_id' => 'setSaleId',
        'odid' => 'setOdid',
        'spp' => 'setSpp',
        'for_pay' => 'setForPay',
        'finished_price' => 'setFinishedPrice',
        'price_with_disc' => 'setPriceWithDisc',
        'nm_id' => 'setNmId',
        'subject' => 'setSubject',
        'category' => 'setCategory',
        'brand' => 'setBrand',
        'is_storno' => 'setIsStorno',
        'sticker' => 'setSticker',
        'srid' => 'setSrid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'g_number' => 'getGNumber',
        'date' => 'getDate',
        'last_change_date' => 'getLastChangeDate',
        'supplier_article' => 'getSupplierArticle',
        'tech_size' => 'getTechSize',
        'barcode' => 'getBarcode',
        'total_price' => 'getTotalPrice',
        'discount_percent' => 'getDiscountPercent',
        'is_supply' => 'getIsSupply',
        'is_realization' => 'getIsRealization',
        'promo_code_discount' => 'getPromoCodeDiscount',
        'warehouse_name' => 'getWarehouseName',
        'country_name' => 'getCountryName',
        'oblast_okrug_name' => 'getOblastOkrugName',
        'region_name' => 'getRegionName',
        'income_id' => 'getIncomeId',
        'sale_id' => 'getSaleId',
        'odid' => 'getOdid',
        'spp' => 'getSpp',
        'for_pay' => 'getForPay',
        'finished_price' => 'getFinishedPrice',
        'price_with_disc' => 'getPriceWithDisc',
        'nm_id' => 'getNmId',
        'subject' => 'getSubject',
        'category' => 'getCategory',
        'brand' => 'getBrand',
        'is_storno' => 'getIsStorno',
        'sticker' => 'getSticker',
        'srid' => 'getSrid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('g_number', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('last_change_date', $data ?? [], null);
        $this->setIfExists('supplier_article', $data ?? [], null);
        $this->setIfExists('tech_size', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('total_price', $data ?? [], null);
        $this->setIfExists('discount_percent', $data ?? [], null);
        $this->setIfExists('is_supply', $data ?? [], null);
        $this->setIfExists('is_realization', $data ?? [], null);
        $this->setIfExists('promo_code_discount', $data ?? [], null);
        $this->setIfExists('warehouse_name', $data ?? [], null);
        $this->setIfExists('country_name', $data ?? [], null);
        $this->setIfExists('oblast_okrug_name', $data ?? [], null);
        $this->setIfExists('region_name', $data ?? [], null);
        $this->setIfExists('income_id', $data ?? [], null);
        $this->setIfExists('sale_id', $data ?? [], null);
        $this->setIfExists('odid', $data ?? [], null);
        $this->setIfExists('spp', $data ?? [], null);
        $this->setIfExists('for_pay', $data ?? [], null);
        $this->setIfExists('finished_price', $data ?? [], null);
        $this->setIfExists('price_with_disc', $data ?? [], null);
        $this->setIfExists('nm_id', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('is_storno', $data ?? [], null);
        $this->setIfExists('sticker', $data ?? [], null);
        $this->setIfExists('srid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['g_number']) && (mb_strlen($this->container['g_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'g_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['supplier_article']) && (mb_strlen($this->container['supplier_article']) > 75)) {
            $invalidProperties[] = "invalid value for 'supplier_article', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['tech_size']) && (mb_strlen($this->container['tech_size']) > 30)) {
            $invalidProperties[] = "invalid value for 'tech_size', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['barcode']) && (mb_strlen($this->container['barcode']) > 30)) {
            $invalidProperties[] = "invalid value for 'barcode', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['warehouse_name']) && (mb_strlen($this->container['warehouse_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'warehouse_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['country_name']) && (mb_strlen($this->container['country_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'country_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['oblast_okrug_name']) && (mb_strlen($this->container['oblast_okrug_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'oblast_okrug_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['region_name']) && (mb_strlen($this->container['region_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'region_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['sale_id']) && (mb_strlen($this->container['sale_id']) > 15)) {
            $invalidProperties[] = "invalid value for 'sale_id', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['subject']) && (mb_strlen($this->container['subject']) > 50)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['category']) && (mb_strlen($this->container['category']) > 50)) {
            $invalidProperties[] = "invalid value for 'category', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['brand']) && (mb_strlen($this->container['brand']) > 50)) {
            $invalidProperties[] = "invalid value for 'brand', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets g_number
     *
     * @return string|null
     */
    public function getGNumber()
    {
        return $this->container['g_number'];
    }

    /**
     * Sets g_number
     *
     * @param string|null $g_number Номер заказа. Объединяет все позиции одного заказа.
     *
     * @return self
     */
    public function setGNumber($g_number)
    {
        if (!is_null($g_number) && (mb_strlen($g_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $g_number when calling SalesItem., must be smaller than or equal to 50.');
        }


        if (is_null($g_number)) {
            throw new \InvalidArgumentException('non-nullable g_number cannot be null');
        }

        $this->container['g_number'] = $g_number;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Дата и время продажи. Это поле соответствует параметру `dateFrom` в запросе, если параметр `flag=1`. Если часовой пояс не указан, то берется Московское время UTC+3.
     *
     * @return self
     */
    public function setDate($date)
    {

        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }

        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets last_change_date
     *
     * @return \DateTime|null
     */
    public function getLastChangeDate()
    {
        return $this->container['last_change_date'];
    }

    /**
     * Sets last_change_date
     *
     * @param \DateTime|null $last_change_date Дата и время обновления информации в сервисе. Это поле соответствует параметру `dateFrom` в запросе, если параметр `flag=0` или не указан. Если часовой пояс не указан, то берется Московское время UTC+3.
     *
     * @return self
     */
    public function setLastChangeDate($last_change_date)
    {

        if (is_null($last_change_date)) {
            throw new \InvalidArgumentException('non-nullable last_change_date cannot be null');
        }

        $this->container['last_change_date'] = $last_change_date;

        return $this;
    }

    /**
     * Gets supplier_article
     *
     * @return string|null
     */
    public function getSupplierArticle()
    {
        return $this->container['supplier_article'];
    }

    /**
     * Sets supplier_article
     *
     * @param string|null $supplier_article Артикул поставщика
     *
     * @return self
     */
    public function setSupplierArticle($supplier_article)
    {
        if (!is_null($supplier_article) && (mb_strlen($supplier_article) > 75)) {
            throw new \InvalidArgumentException('invalid length for $supplier_article when calling SalesItem., must be smaller than or equal to 75.');
        }


        if (is_null($supplier_article)) {
            throw new \InvalidArgumentException('non-nullable supplier_article cannot be null');
        }

        $this->container['supplier_article'] = $supplier_article;

        return $this;
    }

    /**
     * Gets tech_size
     *
     * @return string|null
     */
    public function getTechSize()
    {
        return $this->container['tech_size'];
    }

    /**
     * Sets tech_size
     *
     * @param string|null $tech_size Размер
     *
     * @return self
     */
    public function setTechSize($tech_size)
    {
        if (!is_null($tech_size) && (mb_strlen($tech_size) > 30)) {
            throw new \InvalidArgumentException('invalid length for $tech_size when calling SalesItem., must be smaller than or equal to 30.');
        }


        if (is_null($tech_size)) {
            throw new \InvalidArgumentException('non-nullable tech_size cannot be null');
        }

        $this->container['tech_size'] = $tech_size;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode Бар-код
     *
     * @return self
     */
    public function setBarcode($barcode)
    {
        if (!is_null($barcode) && (mb_strlen($barcode) > 30)) {
            throw new \InvalidArgumentException('invalid length for $barcode when calling SalesItem., must be smaller than or equal to 30.');
        }


        if (is_null($barcode)) {
            throw new \InvalidArgumentException('non-nullable barcode cannot be null');
        }

        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float|null
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float|null $total_price Цена до согласованной скидки/промо/спп. Для получения цены со скидкой можно воспользоваться формулой `priceWithDiscount = totalPrice * (1 - discountPercent/100)`
     *
     * @return self
     */
    public function setTotalPrice($total_price)
    {

        if (is_null($total_price)) {
            throw new \InvalidArgumentException('non-nullable total_price cannot be null');
        }

        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets discount_percent
     *
     * @return int|null
     */
    public function getDiscountPercent()
    {
        return $this->container['discount_percent'];
    }

    /**
     * Sets discount_percent
     *
     * @param int|null $discount_percent Согласованный итоговый дисконт
     *
     * @return self
     */
    public function setDiscountPercent($discount_percent)
    {

        if (is_null($discount_percent)) {
            throw new \InvalidArgumentException('non-nullable discount_percent cannot be null');
        }

        $this->container['discount_percent'] = $discount_percent;

        return $this;
    }

    /**
     * Gets is_supply
     *
     * @return bool|null
     */
    public function getIsSupply()
    {
        return $this->container['is_supply'];
    }

    /**
     * Sets is_supply
     *
     * @param bool|null $is_supply Договор поставки
     *
     * @return self
     */
    public function setIsSupply($is_supply)
    {

        if (is_null($is_supply)) {
            throw new \InvalidArgumentException('non-nullable is_supply cannot be null');
        }

        $this->container['is_supply'] = $is_supply;

        return $this;
    }

    /**
     * Gets is_realization
     *
     * @return bool|null
     */
    public function getIsRealization()
    {
        return $this->container['is_realization'];
    }

    /**
     * Sets is_realization
     *
     * @param bool|null $is_realization Договор реализации
     *
     * @return self
     */
    public function setIsRealization($is_realization)
    {

        if (is_null($is_realization)) {
            throw new \InvalidArgumentException('non-nullable is_realization cannot be null');
        }

        $this->container['is_realization'] = $is_realization;

        return $this;
    }

    /**
     * Gets promo_code_discount
     *
     * @return float|null
     */
    public function getPromoCodeDiscount()
    {
        return $this->container['promo_code_discount'];
    }

    /**
     * Sets promo_code_discount
     *
     * @param float|null $promo_code_discount Скидка по промокоду
     *
     * @return self
     */
    public function setPromoCodeDiscount($promo_code_discount)
    {

        if (is_null($promo_code_discount)) {
            throw new \InvalidArgumentException('non-nullable promo_code_discount cannot be null');
        }

        $this->container['promo_code_discount'] = $promo_code_discount;

        return $this;
    }

    /**
     * Gets warehouse_name
     *
     * @return string|null
     */
    public function getWarehouseName()
    {
        return $this->container['warehouse_name'];
    }

    /**
     * Sets warehouse_name
     *
     * @param string|null $warehouse_name Название склада отгрузки
     *
     * @return self
     */
    public function setWarehouseName($warehouse_name)
    {
        if (!is_null($warehouse_name) && (mb_strlen($warehouse_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $warehouse_name when calling SalesItem., must be smaller than or equal to 50.');
        }


        if (is_null($warehouse_name)) {
            throw new \InvalidArgumentException('non-nullable warehouse_name cannot be null');
        }

        $this->container['warehouse_name'] = $warehouse_name;

        return $this;
    }

    /**
     * Gets country_name
     *
     * @return string|null
     */
    public function getCountryName()
    {
        return $this->container['country_name'];
    }

    /**
     * Sets country_name
     *
     * @param string|null $country_name Страна
     *
     * @return self
     */
    public function setCountryName($country_name)
    {
        if (!is_null($country_name) && (mb_strlen($country_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $country_name when calling SalesItem., must be smaller than or equal to 200.');
        }


        if (is_null($country_name)) {
            throw new \InvalidArgumentException('non-nullable country_name cannot be null');
        }

        $this->container['country_name'] = $country_name;

        return $this;
    }

    /**
     * Gets oblast_okrug_name
     *
     * @return string|null
     */
    public function getOblastOkrugName()
    {
        return $this->container['oblast_okrug_name'];
    }

    /**
     * Sets oblast_okrug_name
     *
     * @param string|null $oblast_okrug_name Округ
     *
     * @return self
     */
    public function setOblastOkrugName($oblast_okrug_name)
    {
        if (!is_null($oblast_okrug_name) && (mb_strlen($oblast_okrug_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $oblast_okrug_name when calling SalesItem., must be smaller than or equal to 200.');
        }


        if (is_null($oblast_okrug_name)) {
            throw new \InvalidArgumentException('non-nullable oblast_okrug_name cannot be null');
        }

        $this->container['oblast_okrug_name'] = $oblast_okrug_name;

        return $this;
    }

    /**
     * Gets region_name
     *
     * @return string|null
     */
    public function getRegionName()
    {
        return $this->container['region_name'];
    }

    /**
     * Sets region_name
     *
     * @param string|null $region_name Регион
     *
     * @return self
     */
    public function setRegionName($region_name)
    {
        if (!is_null($region_name) && (mb_strlen($region_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $region_name when calling SalesItem., must be smaller than or equal to 200.');
        }


        if (is_null($region_name)) {
            throw new \InvalidArgumentException('non-nullable region_name cannot be null');
        }

        $this->container['region_name'] = $region_name;

        return $this;
    }

    /**
     * Gets income_id
     *
     * @return int|null
     */
    public function getIncomeId()
    {
        return $this->container['income_id'];
    }

    /**
     * Sets income_id
     *
     * @param int|null $income_id Номер поставки (от продавца на склад)
     *
     * @return self
     */
    public function setIncomeId($income_id)
    {

        if (is_null($income_id)) {
            throw new \InvalidArgumentException('non-nullable income_id cannot be null');
        }

        $this->container['income_id'] = $income_id;

        return $this;
    }

    /**
     * Gets sale_id
     *
     * @return string|null
     */
    public function getSaleId()
    {
        return $this->container['sale_id'];
    }

    /**
     * Sets sale_id
     *
     * @param string|null $sale_id Уникальный идентификатор продажи/возврата. <ul>  <li> `SXXXXXXXXXX` — продажа  <li> `RXXXXXXXXXX` — возврат  <li> `DXXXXXXXXXXX` — доплата <li> `AXXXXXXXXX` – сторно продаж (все значения полей как у продажи, но поля с суммами и кол-вом с минусом как в возврате) <li> `BXXXXXXXXX` - сторно возврата (все значения полей как у возврата, но поля с суммами и кол-вом с плюсом, в противоположность возврату) </ul>
     *
     * @return self
     */
    public function setSaleId($sale_id)
    {
        if (!is_null($sale_id) && (mb_strlen($sale_id) > 15)) {
            throw new \InvalidArgumentException('invalid length for $sale_id when calling SalesItem., must be smaller than or equal to 15.');
        }


        if (is_null($sale_id)) {
            throw new \InvalidArgumentException('non-nullable sale_id cannot be null');
        }

        $this->container['sale_id'] = $sale_id;

        return $this;
    }

    /**
     * Gets odid
     *
     * @return int|null
     */
    public function getOdid()
    {
        return $this->container['odid'];
    }

    /**
     * Sets odid
     *
     * @param int|null $odid Уникальный идентификатор позиции заказа. Может использоваться для поиска соответствия между заказами и продажами.
     *
     * @return self
     */
    public function setOdid($odid)
    {

        if (is_null($odid)) {
            throw new \InvalidArgumentException('non-nullable odid cannot be null');
        }

        $this->container['odid'] = $odid;

        return $this;
    }

    /**
     * Gets spp
     *
     * @return float|null
     */
    public function getSpp()
    {
        return $this->container['spp'];
    }

    /**
     * Sets spp
     *
     * @param float|null $spp Согласованная скидка постоянного покупателя
     *
     * @return self
     */
    public function setSpp($spp)
    {

        if (is_null($spp)) {
            throw new \InvalidArgumentException('non-nullable spp cannot be null');
        }

        $this->container['spp'] = $spp;

        return $this;
    }

    /**
     * Gets for_pay
     *
     * @return float|null
     */
    public function getForPay()
    {
        return $this->container['for_pay'];
    }

    /**
     * Sets for_pay
     *
     * @param float|null $for_pay К перечислению поставщику
     *
     * @return self
     */
    public function setForPay($for_pay)
    {

        if (is_null($for_pay)) {
            throw new \InvalidArgumentException('non-nullable for_pay cannot be null');
        }

        $this->container['for_pay'] = $for_pay;

        return $this;
    }

    /**
     * Gets finished_price
     *
     * @return float|null
     */
    public function getFinishedPrice()
    {
        return $this->container['finished_price'];
    }

    /**
     * Sets finished_price
     *
     * @param float|null $finished_price Фактическая цена заказа с учетом всех скидок
     *
     * @return self
     */
    public function setFinishedPrice($finished_price)
    {

        if (is_null($finished_price)) {
            throw new \InvalidArgumentException('non-nullable finished_price cannot be null');
        }

        $this->container['finished_price'] = $finished_price;

        return $this;
    }

    /**
     * Gets price_with_disc
     *
     * @return float|null
     */
    public function getPriceWithDisc()
    {
        return $this->container['price_with_disc'];
    }

    /**
     * Sets price_with_disc
     *
     * @param float|null $price_with_disc Цена, от которой считается вознаграждение поставщика `forpay` (с учетом всех согласованных скидок)
     *
     * @return self
     */
    public function setPriceWithDisc($price_with_disc)
    {

        if (is_null($price_with_disc)) {
            throw new \InvalidArgumentException('non-nullable price_with_disc cannot be null');
        }

        $this->container['price_with_disc'] = $price_with_disc;

        return $this;
    }

    /**
     * Gets nm_id
     *
     * @return int|null
     */
    public function getNmId()
    {
        return $this->container['nm_id'];
    }

    /**
     * Sets nm_id
     *
     * @param int|null $nm_id Код WB
     *
     * @return self
     */
    public function setNmId($nm_id)
    {

        if (is_null($nm_id)) {
            throw new \InvalidArgumentException('non-nullable nm_id cannot be null');
        }

        $this->container['nm_id'] = $nm_id;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject Предмет
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (!is_null($subject) && (mb_strlen($subject) > 50)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling SalesItem., must be smaller than or equal to 50.');
        }


        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Категория
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (!is_null($category) && (mb_strlen($category) > 50)) {
            throw new \InvalidArgumentException('invalid length for $category when calling SalesItem., must be smaller than or equal to 50.');
        }


        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }

        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand Бренд
     *
     * @return self
     */
    public function setBrand($brand)
    {
        if (!is_null($brand) && (mb_strlen($brand) > 50)) {
            throw new \InvalidArgumentException('invalid length for $brand when calling SalesItem., must be smaller than or equal to 50.');
        }


        if (is_null($brand)) {
            throw new \InvalidArgumentException('non-nullable brand cannot be null');
        }

        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets is_storno
     *
     * @return int|null
     */
    public function getIsStorno()
    {
        return $this->container['is_storno'];
    }

    /**
     * Sets is_storno
     *
     * @param int|null $is_storno Для сторно-операций `1`, для остальных `0`
     *
     * @return self
     */
    public function setIsStorno($is_storno)
    {

        if (is_null($is_storno)) {
            throw new \InvalidArgumentException('non-nullable is_storno cannot be null');
        }

        $this->container['is_storno'] = $is_storno;

        return $this;
    }

    /**
     * Gets sticker
     *
     * @return string|null
     */
    public function getSticker()
    {
        return $this->container['sticker'];
    }

    /**
     * Sets sticker
     *
     * @param string|null $sticker Цифровое значение стикера, который клеится на товар в процессе сборки заказа по системе Маркетплейс.
     *
     * @return self
     */
    public function setSticker($sticker)
    {

        if (is_null($sticker)) {
            throw new \InvalidArgumentException('non-nullable sticker cannot be null');
        }

        $this->container['sticker'] = $sticker;

        return $this;
    }

    /**
     * Gets srid
     *
     * @return string|null
     */
    public function getSrid()
    {
        return $this->container['srid'];
    }

    /**
     * Sets srid
     *
     * @param string|null $srid Уникальный идентификатор заказа, функционально аналогичный `odid`/`rid`.  Данный параметр введен в июле'22 и в течение переходного периода может быть заполнен не во всех ответах. Примечание для работающих по системе Маркетплейс: `srid` равен `rid` в ответе на метод `GET /api/v2/orders`.
     *
     * @return self
     */
    public function setSrid($srid)
    {

        if (is_null($srid)) {
            throw new \InvalidArgumentException('non-nullable srid cannot be null');
        }

        $this->container['srid'] = $srid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


